{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Endpoint } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.endpoint = Endpoint;\n      this.headers = new HttpHeaders().set('Content-Type', 'application/json');\n      this.currentUser = {};\n    } // Sign-up\n\n\n    signUp(user) {\n      let api = `${this.endpoint}api/Account/RegisterUser`;\n      return this.http.post(api, user).pipe(catchError(this.handleError));\n    } // Sign-in\n\n\n    signIn(user) {\n      return this.http.post(`${this.endpoint}Api/Account/AuthToken`, user).subscribe(res => {\n        localStorage.setItem('access_token', res.token);\n        localStorage.setItem('refrash_token', res.refreshToken);\n        this.getUserProfile(res._id).subscribe(res => {\n          this.currentUser = res;\n          this.router.navigate(['/']);\n        });\n      });\n    }\n\n    Refrashtoken(refreshToken) {\n      return this.http.post(`${this.endpoint}api/Account/RefreshToken`, refreshToken).subscribe(res => {\n        if (res.isSuccess == true) {\n          localStorage.setItem('access_token', res.token);\n          localStorage.setItem('refrash_token', res.refreshToken);\n          this.getUserProfile(res._id).subscribe(res => {\n            this.currentUser = res;\n          });\n        }\n\n        ;\n      });\n    }\n\n    getToken() {\n      return localStorage.getItem('access_token');\n    }\n\n    get isLoggedIn() {\n      let authToken = localStorage.getItem('access_token');\n      return authToken !== null ? true : false;\n    }\n\n    doLogout() {\n      let removeToken = localStorage.removeItem('access_token');\n      removeToken = localStorage.removeItem('refrash_token');\n\n      if (removeToken == null) {\n        this.router.navigate(['log-in']);\n      }\n    } // User profile\n\n\n    getUserProfile(id) {\n      let api = `${this.endpoint}api/Recipe/2`;\n      return this.http.get(api, {\n        headers: this.headers\n      }).pipe(map(res => {\n        return res || {};\n      }), catchError(this.handleError));\n    } // Error\n\n\n    handleError(error) {\n      let msg = '';\n\n      if (error.error instanceof ErrorEvent) {\n        // client-side error\n        msg = error.error.message;\n      } else {\n        // server-side error\n        msg = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n\n      return throwError(msg);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}